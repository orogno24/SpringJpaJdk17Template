
# Spring Boot ????
#spring.config.activate.on-profile=prod

# Spring Boot Web Server Port
server.port = 11000

# MariaDB Connection info
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://192.168.162.128:3306/testDB
spring.datasource.username=poly
spring.datasource.password=1234

# JPA Configuration
#---------------------------------------------
# DDL disable (CREATE, DROP) JPA 테이블 자동생성 방지
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none

# SQL 호출되고, 트랜잭션 종료되면, 엔티티간 연속성 종료 설정
spring.jpa.open-in-view=false

# JPA 프레임워크에서 실행한 함수의 SQL 쿼리 보여주기
spring.jpa.show-sql=true

# JPA 프레임워크에서 실행한 함수의 SQL 쿼리를 가독성 좋게 보여주기(들여쓰기 적용)
spring.jpa.properties.hibernate.format_sql=true

# JPA 프레임워크에서 실행한 함수의 SQL 쿼리의 주석도 보여주기
spring.jpa.properties.hibernate.use_sql_comments=true


# JPA 기본 설정은 테이블과 엔티티를 연결할 때, 자동으로 테이블이름을 소문자로 변경함(실제 DB 테이블 : NOTICE / JPA 인식 : notice)
# 대소문자를 구별하는 데이터베이스는 JPA 소문자 변경 특성으로 인해 테이블을 찾지 못해 에러가 발생할 수 있음
# 따라서 개발자가 정의한 물리적 이름으로 테이블명 사용하도록 설정
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#---------------------------------------------
spring.jpa.properties.hibernate.default_batch_fetch_size=100

# thymeleaf Setting
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# @Cachabled 설정된 엔티티만 2차 캐시 적용
spring.jpa.properties.jakarta.persistence.sharedCache.mode=ENABLE_SELECTIVE

# 2차 캐시 사용여부
spring.jpa.properties.hibernate.cache.use_second_level_cache = true

# 캐시를 생성하는 팩토리 클래스 지정
# RedisDB : org.hibernate.cache.redis.RedisRegionFactory
# Ehcache : org.hibernate.cache.ehcache.EhCacheRegionFactory
# JCache : org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.hibernate.cache.region.factory_class = org.hibernate.cache.jcache.internal.JCacheRegionFactory

# JPA 사용된 통계 보여주기
spring.jpa.properties.hibernate.generate_statistics = true